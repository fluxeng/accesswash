# Generated by Django 5.1.9 on 2025-07-31 23:23

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('distro', '0002_initial'),
        ('portal', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('request_number', models.CharField(db_index=True, max_length=50, unique=True)),
                ('issue_type', models.CharField(choices=[('no_water', 'No Water Supply'), ('low_pressure', 'Low Water Pressure'), ('pipe_burst', 'Pipe Burst/Leak'), ('water_quality', 'Water Quality Issue'), ('meter_problem', 'Meter Problem'), ('billing_inquiry', 'Billing Inquiry'), ('connection_request', 'New Connection Request'), ('disconnection', 'Service Disconnection'), ('other', 'Other Issue')], max_length=20)),
                ('title', models.CharField(help_text='Brief description of the issue', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the issue')),
                ('urgency', models.CharField(choices=[('emergency', 'Emergency'), ('high', 'High'), ('standard', 'Standard'), ('low', 'Low')], default='standard', max_length=10)),
                ('reported_location', models.TextField(help_text='Address or description of issue location')),
                ('location_coordinates', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('status', models.CharField(choices=[('open', 'Open'), ('acknowledged', 'Acknowledged'), ('assigned', 'Assigned'), ('in_progress', 'In Progress'), ('on_hold', 'On Hold'), ('resolved', 'Resolved'), ('closed', 'Closed'), ('cancelled', 'Cancelled')], default='open', max_length=20)),
                ('priority_score', models.IntegerField(default=0, help_text='System-calculated priority score')),
                ('resolution_notes', models.TextField(blank=True)),
                ('resolution_category', models.CharField(blank=True, choices=[('resolved_field', 'Resolved in Field'), ('resolved_phone', 'Resolved over Phone'), ('resolved_office', 'Resolved in Office'), ('duplicate', 'Duplicate Request'), ('invalid', 'Invalid Request'), ('referred', 'Referred to Other Department')], max_length=20)),
                ('customer_rating', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], help_text='Customer satisfaction rating (1-5 stars)', null=True)),
                ('customer_feedback', models.TextField(blank=True)),
                ('created_work_order', models.BooleanField(default=False)),
                ('work_order_number', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_at', models.DateTimeField(blank=True, null=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('target_response_time', models.DateTimeField(blank=True, null=True)),
                ('target_resolution_time', models.DateTimeField(blank=True, null=True)),
                ('actual_response_time', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, help_text='Staff member assigned to this request', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_requests', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_requests', to='portal.customer')),
                ('related_asset', models.ForeignKey(blank=True, help_text='Related infrastructure asset', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customer_requests', to='distro.asset')),
            ],
            options={
                'verbose_name': 'Service Request',
                'verbose_name_plural': 'Service Requests',
                'db_table': 'service_requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ServiceRequestComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('is_internal', models.BooleanField(default=False, help_text='Internal staff notes, hidden from customer')),
                ('status_changed_from', models.CharField(blank=True, max_length=20)),
                ('status_changed_to', models.CharField(blank=True, max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author_customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='service_comments', to='portal.customer')),
                ('author_staff', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='service_comments', to=settings.AUTH_USER_MODEL)),
                ('service_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='support.servicerequest')),
            ],
            options={
                'db_table': 'service_request_comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ServiceRequestPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to='service_requests/%Y/%m/')),
                ('caption', models.CharField(blank=True, max_length=200)),
                ('file_size', models.IntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('image_width', models.IntegerField(blank=True, null=True)),
                ('image_height', models.IntegerField(blank=True, null=True)),
                ('photo_location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('service_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='support.servicerequest')),
                ('uploaded_by_customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='uploaded_photos', to='portal.customer')),
                ('uploaded_by_staff', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='uploaded_photos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'service_request_photos',
                'ordering': ['uploaded_at'],
            },
        ),
        migrations.AddIndex(
            model_name='servicerequest',
            index=models.Index(fields=['request_number'], name='service_req_request_c57f10_idx'),
        ),
        migrations.AddIndex(
            model_name='servicerequest',
            index=models.Index(fields=['customer', 'status'], name='service_req_custome_7d484f_idx'),
        ),
        migrations.AddIndex(
            model_name='servicerequest',
            index=models.Index(fields=['issue_type', 'urgency'], name='service_req_issue_t_9b0cff_idx'),
        ),
        migrations.AddIndex(
            model_name='servicerequest',
            index=models.Index(fields=['assigned_to', 'status'], name='service_req_assigne_19e50a_idx'),
        ),
        migrations.AddIndex(
            model_name='servicerequest',
            index=models.Index(fields=['created_at'], name='service_req_created_bc6133_idx'),
        ),
        migrations.AddIndex(
            model_name='servicerequest',
            index=models.Index(fields=['status', 'created_at'], name='service_req_status_9bff2a_idx'),
        ),
        migrations.AddIndex(
            model_name='servicerequestcomment',
            index=models.Index(fields=['service_request', 'created_at'], name='service_req_service_d9e3d6_idx'),
        ),
        migrations.AddIndex(
            model_name='servicerequestcomment',
            index=models.Index(fields=['author_customer'], name='service_req_author__15410e_idx'),
        ),
        migrations.AddIndex(
            model_name='servicerequestcomment',
            index=models.Index(fields=['author_staff'], name='service_req_author__41c5ea_idx'),
        ),
        migrations.AddIndex(
            model_name='servicerequestphoto',
            index=models.Index(fields=['service_request', 'uploaded_at'], name='service_req_service_47f83c_idx'),
        ),
    ]
